#include <iostream> 
using namespace std; 
int main()
{
int n = 5, m = 4;
int alloc[5][4] = {{4, 0, 0, 1}, {1, 1, 0, 0}, {1, 2, 5, 4}, {1, 4,0,2}, {0, 2, 0,1}};
int max[5][4] = {{6, 0, 1, 2}, {2, 7, 5, 0}, {2, 3, 5, 6}, {1, 6, 5, 3}, {1, 6, 5, 6}};
int avail[4] = {3, 2, 5, 1};
int need[5][4];
bool flag[5] = {false};
for (int i = 0; i < n; i++)
{
    for (int j = 0; j < m; j++)
    {
        need[i][j] = max[i][j] - alloc[i][j];
        cout << need[i][j] << " ";
    }
    cout << endl;
}
int a = 0, res[5];
int counter=0;
int request1[4]={1,0,1,0};
for(int i=0;i<4;i++)
{
    if(request1[i]>need[1][i])
    {
        counter=1;
        cout<<"request can not be satisfied";
        break;
    }

}
if(counter==0)
{
    for(int i=0;i<4;i++)
{
    if(request1[i]>avail[i])
    {
        counter=1;
        cout<<"on hold";
        break;
    }

}
}
if(counter==0)
{
    for(int i=0;i<4;i++)
{
   avail[i]-=request1[i];
   alloc[1][i]+=request1[i];
   need[1][i]-=request1[i];

}

}
if(counter==0)
{
for (int b = 0; b < n; b++)
{
    for (int i = 0; i < n; i++)
    {
        if (!flag[i])
        {
            int f = 0;
            for (int j = 0; j < m; j++)
            {
                if (need[i][j] > avail[j])
                {
                    f = 1;
                    break;
                }
            }
            if (f == 0)
            {
                res[a] = i;
                a++;
                for (int j = 0; j < m; j++)
                {
                    avail[j] += alloc[i][j];
                }
                flag[i] = true;
            }
        }
    }
}
int f=0;
for(int i=0;i<n;i++){
if(!flag[i]){ f=1;
cout<<"Not safe";break; }
}
if(f==0){
cout<<"System is in safe mode"<<endl; for(int i=0;i<n;i++){
cout<<res[i]<<" "; }
}
}
}